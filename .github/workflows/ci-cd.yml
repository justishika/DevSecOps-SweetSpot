name: SweetSpot Marketplace CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v3

    - name: Install dependencies
      run: npm ci

    - name: Create required directories
      run: |
        mkdir -p uploads
        mkdir -p server/uploads
        mkdir -p client/src/components/__tests__
        mkdir -p server/__tests__

    - name: Wait for MongoDB to be ready
      run: |
        for i in {1..30}; do
          if curl -s http://127.0.0.1:27017 | grep -q "It looks like you are trying to access MongoDB"; then
            echo "MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB..."
          sleep 2
        done

    - name: Run tests with Doppler (if token exists) or fallback
      run: |
        if [ -n "${{ secrets.DOPPLER_TOKEN }}" ]; then
          echo "Using Doppler for environment variables"
          doppler secrets download --no-file --format=env-no-quotes > .env.ci
          source .env.ci
        else
          echo "Using fallback environment variables"
          echo "MONGODB_URI=mongodb://127.0.0.1:27017/sweetspot_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-secret-key-for-github-actions" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "PORT=3001" >> $GITHUB_ENV
        fi
        npm test -- --passWithNoTests --detectOpenHandles --forceExit --maxWorkers=1
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        DOPPLER_PROJECT: sweetspotmarketplace
        DOPPLER_CONFIG: dev
        CI: true

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v3

    - name: Install dependencies
      run: npm ci

    - name: Create required directories
      run: mkdir -p uploads

    - name: Build application with Doppler (if token exists) or fallback
      run: |
        if [ -n "${{ secrets.DOPPLER_TOKEN }}" ]; then
          echo "Building with Doppler environment variables"
          doppler secrets download --no-file --format=env-no-quotes > .env.ci
          source .env.ci
        else
          echo "Building with fallback environment variables"
          export NODE_ENV=production
        fi
        npm run build
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        DOPPLER_PROJECT: sweetspotmarketplace
        DOPPLER_CONFIG: dev

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: |
          dist/
          server/
          package.json
          package-lock.json
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate || true

    - name: Check for known vulnerabilities
      run: |
        if npm audit --audit-level=high; then
          echo "No high severity vulnerabilities found"
        else
          echo "High severity vulnerabilities found, but not failing build"
        fi

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check code formatting (if prettier exists)
      run: |
        if [ -f ".prettierrc" ] || [ -f "prettier.config.js" ]; then
          npx prettier --check . || echo "Prettier check failed but not blocking"
        else
          echo "No prettier configuration found, skipping"
        fi

    - name: Run ESLint 
      run: |
        if [ -f ".eslintrc" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
          npx eslint . --ext .js,.jsx || echo "ESLint check failed but not blocking"
        else
          echo "No ESLint configuration found, skipping"
        fi 